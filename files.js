/** @satisfies {import('@webcontainer/api').FileSystemTree} */
export const files = {"contracts":{"directory":{"Add.ts":{"file":{"contents":"import { Field, SmartContract, state, State, method } from \"snarkyjs\";\n\n/**\n * Basic Example\n * See https://docs.minaprotocol.com/zkapps for more info.\n *\n * The Add contract initializes the state variable 'num' to be a Field(1) value by default when deployed.\n * When the 'update' method is called, the Add contract adds Field(2) to its 'num' contract state.\n *\n * This file is safe to delete and replace with your own contract.\n */\nexport class Add extends SmartContract {\n  @state(Field) num = State<Field>();\n\n  init() {\n    super.init();\n    this.num.set(Field(1));\n  }\n\n  @method update() {\n    const currentState = this.num.get();\n    this.num.assertEquals(currentState); // precondition that links this.num.get() to the actual on-chain state\n    const newState = currentState.add(2);\n    this.num.set(newState);\n  }\n}\n"}},"build":{"directory":{"Add.js":{"file":{"contents":"var __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nimport { Field, SmartContract, state, State, method } from \"snarkyjs\";\n/**\n * Basic Example\n * See https://docs.minaprotocol.com/zkapps for more info.\n *\n * The Add contract initializes the state variable 'num' to be a Field(1) value by default when deployed.\n * When the 'update' method is called, the Add contract adds Field(2) to its 'num' contract state.\n *\n * This file is safe to delete and replace with your own contract.\n */\nexport class Add extends SmartContract {\n  constructor() {\n    super(...arguments);\n    this.num = State();\n  }\n  init() {\n    super.init();\n    this.num.set(Field(1));\n  }\n  update() {\n    const currentState = this.num.get();\n    this.num.assertEquals(currentState); // precondition that links this.num.get() to the actual on-chain state\n    const newState = currentState.add(2);\n    this.num.set(newState);\n  }\n}\n__decorate(\n  [state(Field), __metadata(\"design:type\", Object)],\n  Add.prototype,\n  \"num\",\n  void 0\n);\n__decorate(\n  [\n    method,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0),\n  ],\n  Add.prototype,\n  \"update\",\n  null\n);\n"}}}}}},"hooks":{"directory":{"useMina.ts":{"file":{"contents":"import { useEffect, useState } from \"react\";\nimport ZkappWorkerClient from \"../zkappWorkerClient\";\nimport { Field, PublicKey } from \"snarkyjs\";\n\nlet transactionFee = 0.1;\n\nexport const useMina = (options: useMinaProps) => {\n  let [state, setState] = useState({\n    zkappWorkerClient: null as null | ZkappWorkerClient,\n    hasWallet: null as null | boolean,\n    hasBeenSetup: false,\n    accountExists: false,\n    values: null as null | { [key: string]: Field[] },\n    publicKey: null as null | PublicKey,\n    zkappPublicKey: null as null | PublicKey,\n    creatingTransaction: false,\n  });\n\n  // -------------------------------------------------------\n  // Do Setup\n\n  useEffect(() => {\n    (async () => {\n      if (!state.hasBeenSetup) {\n        const zkappWorkerClient = new ZkappWorkerClient();\n\n        console.log(\"Loading SnarkyJS...\");\n        await zkappWorkerClient.loadSnarkyJS();\n        console.log(\"done\");\n\n        await zkappWorkerClient.setActiveInstanceToBerkeley();\n\n        const mina = (window as any).mina;\n\n        if (mina == null) {\n          setState({ ...state, hasWallet: false });\n          return;\n        }\n\n        const publicKeyBase58: string = (await mina.requestAccounts())[0];\n        const publicKey = PublicKey.fromBase58(publicKeyBase58);\n\n        console.log(\"using key\", publicKey.toBase58());\n\n        console.log(\"checking if account exists...\");\n        const res = await zkappWorkerClient.fetchAccount({\n          publicKey: publicKey!,\n        });\n        const accountExists = res.error == null;\n\n        await zkappWorkerClient.loadContract();\n\n        console.log(\"compiling zkApp\");\n        await zkappWorkerClient.compileContract();\n        console.log(\"zkApp compiled\");\n\n        const zkappPublicKey = PublicKey.fromBase58(\n          \"B62qnpytBzgKPfjeJ3mxEojzHGJBqUj7qguwNgbcJQZqtiho5KGWfZn\"\n        );\n\n        await zkappWorkerClient.initZkappInstance(zkappPublicKey);\n\n        console.log(\"getting zkApp state...\");\n        await zkappWorkerClient.fetchAccount({ publicKey: zkappPublicKey });\n\n        const optionValues = options.values ?? [];\n\n        const values: any = await Promise.all(\n          optionValues.map(async (value) => [\n            value,\n            await zkappWorkerClient.getValue(value),\n          ])\n        );\n        // console.log(values['num'].toString())\n        // const currentNum = await zkappWorkerClient.getValue('num');\n        // console.log(currentNum)\n        // console.log('current state:', currentNum.toString());\n\n        setState({\n          ...state,\n          zkappWorkerClient,\n          hasWallet: true,\n          hasBeenSetup: true,\n          publicKey,\n          zkappPublicKey,\n          accountExists,\n          values: Object.fromEntries(values),\n          // currentNum,\n        });\n      }\n    })();\n  }, []);\n\n  // -------------------------------------------------------\n  // Wait for account to exist, if it didn't\n\n  useEffect(() => {\n    (async () => {\n      if (state.hasBeenSetup && !state.accountExists) {\n        for (;;) {\n          console.log(\"checking if account exists...\");\n          const res = await state.zkappWorkerClient!.fetchAccount({\n            publicKey: state.publicKey!,\n          });\n          const accountExists = res.error == null;\n          if (accountExists) {\n            break;\n          }\n          await new Promise((resolve) => setTimeout(resolve, 5000));\n        }\n        setState({ ...state, accountExists: true });\n      }\n    })();\n  }, [state.hasBeenSetup]);\n\n  // -------------------------------------------------------\n  // Send a transaction\n\n  const onSendTransaction = async () => {\n    setState({ ...state, creatingTransaction: true });\n    console.log(\"sending a transaction...\");\n\n    await state.zkappWorkerClient!.fetchAccount({\n      publicKey: state.publicKey!,\n    });\n\n    await state.zkappWorkerClient!.createUpdateTransaction();\n\n    console.log(\"creating proof...\");\n    await state.zkappWorkerClient!.proveUpdateTransaction();\n\n    console.log(\"getting Transaction JSON...\");\n    const transactionJSON = await state.zkappWorkerClient!.getTransactionJSON();\n\n    console.log(\"requesting send transaction...\");\n    const { hash } = await (window as any).mina.sendTransaction({\n      transaction: transactionJSON,\n      feePayer: {\n        fee: transactionFee,\n        memo: \"\",\n      },\n    });\n\n    console.log(\n      \"See transaction at https://berkeley.minaexplorer.com/transaction/\" + hash\n    );\n\n    setState({ ...state, creatingTransaction: false });\n  };\n\n  // -------------------------------------------------------\n  // Refresh the current state\n\n  const onRefreshCurrentNum = async () => {\n    console.log(\"getting zkApp state...\");\n    await state.zkappWorkerClient!.fetchAccount({\n      publicKey: state.zkappPublicKey!,\n    });\n    const currentNum = await state.zkappWorkerClient!.getValue(\"num\");\n    console.log(\"current state:\", currentNum.toString());\n\n    setState({ ...state });\n  };\n\n  return [state, onRefreshCurrentNum, onSendTransaction];\n};\n\ninterface useMinaProps {\n  publicKey: string;\n  values?: string[];\n}\n"}}}},"next-env.d.ts":{"file":{"contents":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n"}},"next.config.js":{"file":{"contents":"/** @type {import('next').NextConfig} */\n\nconst nextConfig = {\n  reactStrictMode: false,\n  swcMinify: true,\n\n  webpack(config) {\n    config.resolve.alias = {\n      ...config.resolve.alias,\n      snarkyjs: require(\"path\").resolve(\"./node_modules/snarkyjs\"),\n    };\n    config.optimization.minimizer = [];\n    return config;\n  },\n  // To enable SnarkyJS for the web, we must set the COOP and COEP headers.\n  // See here for more information: https://docs.minaprotocol.com/zkapps/how-to-write-a-zkapp-ui#enabling-coop-and-coep-headers\n  async headers() {\n    return [\n      {\n        source: \"/(.*)\",\n        headers: [\n          {\n            key: \"Cross-Origin-Opener-Policy\",\n            value: \"same-origin\",\n          },\n          {\n            key: \"Cross-Origin-Embedder-Policy\",\n            value: \"credentialless\",\n          },\n          {\n            key: \"Cache-Control\",\n            value: \"no-cache\",\n          },\n        ],\n      },\n    ];\n  },\n  pageExtensions: [\"page.tsx\", \"page.ts\", \"page.jsx\", \"page.js\"],\n  images: {\n    unoptimized: true,\n  },\n  basePath: undefined,\n  assetPrefix: undefined,\n};\n\nmodule.exports = nextConfig;\n"}},"package.json":{"file":{"contents":"{\n  \"name\": \"ui\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"export\": \"next export\",\n    \"ts-watch\": \"tsc --noEmit --incremental --watch\",\n    \"deploy\": \"next build && next export && touch out/.nojekyll && git add -f out/ && git commit -m \\\"Deploy gh-pages\\\" && cd ../../ && git subtree push --prefix 04-zkapp-browser-ui/ui/out origin gh-pages\"\n  },\n  \"dependencies\": {\n    \"coi-serviceworker\": \"^0.1.6\",\n    \"next\": \"13.0.0\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"snarkyjs\": \"^0.9.3\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"18.11.7\",\n    \"@types/react\": \"18.0.24\",\n    \"@types/react-dom\": \"18.0.8\",\n    \"eslint\": \"8.26.0\",\n    \"eslint-config-next\": \"13.0.0\",\n    \"prettier\": \"^2.8.4\",\n    \"typescript\": \"4.8.4\"\n  }\n}\n"}},"pages":{"directory":{"_app.page.tsx":{"file":{"contents":"// @ts-nocheck\nimport { useMina } from \"../hooks/useMina\";\n\nexport default function App() {\n  const [state, onRefreshCurrentNum, onSendTransaction] = useMina({\n    publicKey: \"B62qnpytBzgKPfjeJ3mxEojzHGJBqUj7qguwNgbcJQZqtiho5KGWfZn\",\n    values: [\"num\"],\n  });\n  const { values } = state;\n\n  // -------------------------------------------------------\n  // Create UI elements\n\n  let hasWallet;\n  if (state.hasWallet != null && !state.hasWallet) {\n    const auroLink = \"https://www.aurowallet.com/\";\n    const auroLinkElem = (\n      <a href={auroLink} target=\"_blank\" rel=\"noreferrer\">\n        {\" \"}\n        [Link]{\" \"}\n      </a>\n    );\n    hasWallet = (\n      <div>\n        {\" \"}\n        Could not find a wallet. Install Auro wallet here: {auroLinkElem}\n      </div>\n    );\n  }\n\n  let setupText = state.hasBeenSetup\n    ? \"SnarkyJS Ready\"\n    : \"Setting up SnarkyJS...\";\n  let setup = (\n    <div>\n      {\" \"}\n      {setupText} {hasWallet}\n    </div>\n  );\n\n  let accountDoesNotExist;\n  if (state.hasBeenSetup && !state.accountExists) {\n    const faucetLink =\n      \"https://faucet.minaprotocol.com/?address=\" + state.publicKey!.toBase58();\n    accountDoesNotExist = (\n      <div>\n        Account does not exist. Please visit the faucet to fund this account\n        <a href={faucetLink} target=\"_blank\" rel=\"noreferrer\">\n          {\" \"}\n          [Link]{\" \"}\n        </a>\n      </div>\n    );\n  }\n\n  let mainContent;\n  if (state.hasBeenSetup && state.accountExists) {\n    mainContent = (\n      <div>\n        <button\n          onClick={onSendTransaction}\n          disabled={state.creatingTransaction}\n        >\n          {\" \"}\n          Send Transaction{\" \"}\n        </button>\n        <div> Current Number in zkApp: {values!.num!.toString()} </div>\n        <button onClick={onRefreshCurrentNum}> Get Latest State</button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {setup}\n      {accountDoesNotExist}\n      {mainContent}\n    </div>\n  );\n}\n"}},"index.page.tsx":{"file":{"contents":"import Head from \"next/head\";\n\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <title>Create Next App</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main>\n        <h1>test</h1>\n      </main>\n    </>\n  );\n}\n"}}}},"tsconfig.json":{"file":{"contents":"{\n  \"compilerOptions\": {\n    \"target\": \"ES2019\",\n    \"module\": \"es2022\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"strictPropertyInitialization\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n"}},"worker.js":{"file":{"contents":"// This is a module worker, so we can use imports (in the browser too!)\nimport pi from \"./utils/pi\";\n\naddEventListener(\"message\", (event) => {\n  postMessage(pi(event.data));\n});\n"}},"zkappWorker.ts":{"file":{"contents":"import { Mina, isReady, PublicKey, fetchAccount } from \"snarkyjs\";\n\ntype Transaction = Awaited<ReturnType<typeof Mina.transaction>>;\n\n// ---------------------------------------------------------------------------------------\n\nimport type { Add } from \"./contracts/Add\";\n\nconst state = {\n  Add: null as null | typeof Add,\n  zkapp: null as null | Add,\n  transaction: null as null | Transaction,\n};\n\n// ---------------------------------------------------------------------------------------\n\nconst functions = {\n  loadSnarkyJS: async (args: {}) => {\n    await isReady;\n  },\n  setActiveInstanceToBerkeley: async (args: {}) => {\n    const Berkeley = Mina.Network(\n      \"https://proxy.berkeley.minaexplorer.com/graphql\"\n    );\n    Mina.setActiveInstance(Berkeley);\n  },\n  loadContract: async (args: {}) => {\n    const { Add } = await import(\"./contracts/build/Add\");\n    state.Add = Add;\n  },\n  compileContract: async (args: {}) => {\n    await state.Add!.compile();\n  },\n  fetchAccount: async (args: { publicKey58: string }) => {\n    const publicKey = PublicKey.fromBase58(args.publicKey58);\n    return await fetchAccount({ publicKey });\n  },\n  initZkappInstance: async (args: { publicKey58: string }) => {\n    const publicKey = PublicKey.fromBase58(args.publicKey58);\n    state.zkapp = new state.Add!(publicKey);\n  },\n  getValue: async (args: { value: string }) => {\n    const currentValue = await state.zkapp![args.value as \"num\"].get();\n    return JSON.stringify(currentValue.toJSON());\n  },\n  createUpdateTransaction: async (args: {}) => {\n    const transaction = await Mina.transaction(() => {\n      state.zkapp!.update();\n    });\n    state.transaction = transaction;\n  },\n  proveUpdateTransaction: async (args: {}) => {\n    await state.transaction!.prove();\n  },\n  getTransactionJSON: async (args: {}) => {\n    return state.transaction!.toJSON();\n  },\n};\n\n// ---------------------------------------------------------------------------------------\n\nexport type WorkerFunctions = keyof typeof functions;\n\nexport type ZkappWorkerRequest = {\n  id: number;\n  fn: WorkerFunctions;\n  args: any;\n};\n\nexport type ZkappWorkerReponse = {\n  id: number;\n  data: any;\n};\naddEventListener(\"message\", async (event: MessageEvent<ZkappWorkerRequest>) => {\n  const returnData = await functions[event.data.fn](event.data.args);\n\n  const message: ZkappWorkerReponse = {\n    id: event.data.id,\n    data: returnData,\n  };\n  postMessage(message);\n});\n"}},"zkappWorkerClient.ts":{"file":{"contents":"import { fetchAccount, PublicKey, PrivateKey, Field } from \"snarkyjs\";\n\nimport type {\n  ZkappWorkerRequest,\n  ZkappWorkerReponse,\n  WorkerFunctions,\n} from \"./zkappWorker\";\n\nexport default class ZkappWorkerClient {\n  // ---------------------------------------------------------------------------------------\n\n  loadSnarkyJS() {\n    return this._call(\"loadSnarkyJS\", {});\n  }\n\n  setActiveInstanceToBerkeley() {\n    return this._call(\"setActiveInstanceToBerkeley\", {});\n  }\n\n  loadContract() {\n    return this._call(\"loadContract\", {});\n  }\n\n  compileContract() {\n    return this._call(\"compileContract\", {});\n  }\n\n  fetchAccount({\n    publicKey,\n  }: {\n    publicKey: PublicKey;\n  }): ReturnType<typeof fetchAccount> {\n    const result = this._call(\"fetchAccount\", {\n      publicKey58: publicKey.toBase58(),\n    });\n    return result as ReturnType<typeof fetchAccount>;\n  }\n\n  initZkappInstance(publicKey: PublicKey) {\n    return this._call(\"initZkappInstance\", {\n      publicKey58: publicKey.toBase58(),\n    });\n  }\n\n  async getValue(value: string): Promise<Field> {\n    const result = await this._call(\"getValue\", { value });\n    return Field.fromJSON(JSON.parse(result as string));\n  }\n\n  createUpdateTransaction() {\n    return this._call(\"createUpdateTransaction\", {});\n  }\n\n  proveUpdateTransaction() {\n    return this._call(\"proveUpdateTransaction\", {});\n  }\n\n  async getTransactionJSON() {\n    const result = await this._call(\"getTransactionJSON\", {});\n    return result;\n  }\n\n  // ---------------------------------------------------------------------------------------\n\n  worker: Worker;\n\n  promises: {\n    [id: number]: { resolve: (res: any) => void; reject: (err: any) => void };\n  };\n\n  nextId: number;\n\n  constructor() {\n    this.worker = new Worker(new URL(\"./zkappWorker\", import.meta.url));\n    this.promises = {};\n    this.nextId = 0;\n\n    this.worker.onmessage = (event: MessageEvent<ZkappWorkerReponse>) => {\n      this.promises[event.data.id].resolve(event.data.data);\n      delete this.promises[event.data.id];\n    };\n  }\n\n  _call(fn: WorkerFunctions, args: any) {\n    return new Promise((resolve, reject) => {\n      this.promises[this.nextId] = { resolve, reject };\n\n      const message: ZkappWorkerRequest = {\n        id: this.nextId,\n        fn,\n        args,\n      };\n\n      this.worker.postMessage(message);\n\n      this.nextId++;\n    });\n  }\n}\n"}}}