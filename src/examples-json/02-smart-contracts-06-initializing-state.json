{"type":"playground","base":"smart-contract","files":{"src":{"directory":{"main*ts":{"file":{"contents":"import {\n  SmartContract,\n  PrivateKey,\n  PublicKey,\n  Field,\n  method,\n  AccountUpdate,\n  Mina,\n  state,\n  State,\n  Provable,\n} from \"o1js\";\n\nclass HelloWorld extends SmartContract {\n  @state(Field) x = State<Field>();\n\n  init() {\n    super.init();\n    this.x.set(Field(10)); // initial state\n  }\n}\n\nconst useProof = false;\nconst Local = Mina.LocalBlockchain({ proofsEnabled: useProof });\nMina.setActiveInstance(Local);\nconst { privateKey: deployerKey, publicKey: deployerAccount } =\n  Local.testAccounts[0];\nconst { privateKey: senderKey, publicKey: senderAccount } =\n  Local.testAccounts[1];\n\nconst zkAppPrivateKey = PrivateKey.random();\nconst zkAppAddress = zkAppPrivateKey.toPublicKey();\nconst zkAppInstance = new HelloWorld(zkAppAddress);\nconst deployTxn = await Mina.transaction(deployerAccount, () => {\n  AccountUpdate.fundNewAccount(deployerAccount);\n  zkAppInstance.deploy();\n});\nawait deployTxn.sign([deployerKey, zkAppPrivateKey]).send();\nconst x = zkAppInstance.x.get();\nProvable.log(\"state after init:\", x);\n"}}}}},"filesArray":["src/main.ts"],"highlightedItem":{"highlightedName":"main*ts","highlightedCode":"import {\n  SmartContract,\n  PrivateKey,\n  PublicKey,\n  Field,\n  method,\n  AccountUpdate,\n  Mina,\n  state,\n  State,\n  Provable,\n} from \"o1js\";\n\nclass HelloWorld extends SmartContract {\n  @state(Field) x = State<Field>();\n\n  init() {\n    super.init();\n    this.x.set(Field(10)); // initial state\n  }\n}\n\nconst useProof = false;\nconst Local = Mina.LocalBlockchain({ proofsEnabled: useProof });\nMina.setActiveInstance(Local);\nconst { privateKey: deployerKey, publicKey: deployerAccount } =\n  Local.testAccounts[0];\nconst { privateKey: senderKey, publicKey: senderAccount } =\n  Local.testAccounts[1];\n\nconst zkAppPrivateKey = PrivateKey.random();\nconst zkAppAddress = zkAppPrivateKey.toPublicKey();\nconst zkAppInstance = new HelloWorld(zkAppAddress);\nconst deployTxn = await Mina.transaction(deployerAccount, () => {\n  AccountUpdate.fundNewAccount(deployerAccount);\n  zkAppInstance.deploy();\n});\nawait deployTxn.sign([deployerKey, zkAppPrivateKey]).send();\nconst x = zkAppInstance.x.get();\nProvable.log(\"state after init:\", x);\n"},"focusedFiles":{"main*ts":{"file":{"contents":"import {\n  SmartContract,\n  PrivateKey,\n  PublicKey,\n  Field,\n  method,\n  AccountUpdate,\n  Mina,\n  state,\n  State,\n  Provable,\n} from \"o1js\";\n\nclass HelloWorld extends SmartContract {\n  @state(Field) x = State<Field>();\n\n  init() {\n    super.init();\n    this.x.set(Field(10)); // initial state\n  }\n}\n\nconst useProof = false;\nconst Local = Mina.LocalBlockchain({ proofsEnabled: useProof });\nMina.setActiveInstance(Local);\nconst { privateKey: deployerKey, publicKey: deployerAccount } =\n  Local.testAccounts[0];\nconst { privateKey: senderKey, publicKey: senderAccount } =\n  Local.testAccounts[1];\n\nconst zkAppPrivateKey = PrivateKey.random();\nconst zkAppAddress = zkAppPrivateKey.toPublicKey();\nconst zkAppInstance = new HelloWorld(zkAppAddress);\nconst deployTxn = await Mina.transaction(deployerAccount, () => {\n  AccountUpdate.fundNewAccount(deployerAccount);\n  zkAppInstance.deploy();\n});\nawait deployTxn.sign([deployerKey, zkAppPrivateKey]).send();\nconst x = zkAppInstance.x.get();\nProvable.log(\"state after init:\", x);\n"}}},"command":"npm run build && node build/src/main.js"}