{"name":"Smart Contracts","test":"Add.test.ts","tutorial":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nconst chCodeConfig = {\n  \"staticMediaQuery\": \"not screen, (max-width: 768px)\",\n  \"autoImport\": false,\n  \"showCopyButton\": true,\n  \"theme\": {},\n  \"skipLanguages\": [],\n  \"filepath\": undefined\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {CH} = _components;\n  if (!CH) _missingMdxReference(\"CH\", false);\n  if (!CH.Code) _missingMdxReference(\"CH.Code\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Smart Contracts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Smart contracts are written by extending the base class \", _jsx(_components.strong, {\n        children: \"SmartContract\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(CH.Code, {\n      codeConfig: chCodeConfig,\n      northPanel: {\n        \"tabs\": [\"\"],\n        \"active\": \"\",\n        \"heightRatio\": 1\n      },\n      files: [{\n        \"name\": \"\",\n        \"focus\": \"\",\n        \"code\": {\n          \"lines\": [{\n            \"tokens\": [{\n              \"content\": \"class HelloWorld extends SmartContract {}\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }],\n          \"lang\": \"ts\"\n        },\n        \"annotations\": []\n      }]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Interaction with a smart contract happens by calling one or more of its methods. You declare methods using the \", _jsx(_components.strong, {\n        children: \"@method\"\n      }), \" decorator:\"]\n    }), \"\\n\", _jsx(CH.Code, {\n      codeConfig: chCodeConfig,\n      northPanel: {\n        \"tabs\": [\"\"],\n        \"active\": \"\",\n        \"heightRatio\": 1\n      },\n      files: [{\n        \"name\": \"\",\n        \"focus\": \"\",\n        \"code\": {\n          \"lines\": [{\n            \"tokens\": [{\n              \"content\": \"class HelloWorld extends SmartContract {\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }, {\n            \"tokens\": [{\n              \"content\": \"  @method myMethod(x: Field) {\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }, {\n            \"tokens\": [{\n              \"content\": \"    x.mul(2).assertEquals(5);\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }, {\n            \"tokens\": [{\n              \"content\": \"  }\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }, {\n            \"tokens\": [{\n              \"content\": \"}\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }],\n          \"lang\": \"ts\"\n        },\n        \"annotations\": []\n      }]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Update the state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Our goal is when the 'update' method is called, the Add contract adds Field(2) to its 'num' contract state.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can update our current state using the \", _jsx(_components.strong, {\n        children: \"add\"\n      }), \" method :\"]\n    }), \"\\n\", _jsx(CH.Code, {\n      codeConfig: chCodeConfig,\n      northPanel: {\n        \"tabs\": [\"\"],\n        \"active\": \"\",\n        \"heightRatio\": 1\n      },\n      files: [{\n        \"name\": \"\",\n        \"focus\": \"\",\n        \"code\": {\n          \"lines\": [{\n            \"tokens\": [{\n              \"content\": \"const newState = currentState.add(2);\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }],\n          \"lang\": \"ts\"\n        },\n        \"annotations\": []\n      }]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"And update the state of \", _jsx(_components.strong, {\n        children: \"num\"\n      }), \" with our new state:\"]\n    }), \"\\n\", _jsx(CH.Code, {\n      codeConfig: chCodeConfig,\n      northPanel: {\n        \"tabs\": [\"\"],\n        \"active\": \"\",\n        \"heightRatio\": 1\n      },\n      files: [{\n        \"name\": \"\",\n        \"focus\": \"\",\n        \"code\": {\n          \"lines\": [{\n            \"tokens\": [{\n              \"content\": \"this.num.set(newState);\",\n              \"props\": {\n                \"style\": {\n                  \"color\": \"#BBBBBB\"\n                }\n              }\n            }]\n          }],\n          \"lang\": \"ts\"\n        },\n        \"annotations\": []\n      }]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  chCodeConfig,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"files":{"test2":{"directory":{"Add2*ts":{"file":{"contents":"import { Field, SmartContract, state, State, method } from \"snarkyjs\";\n\nexport class Add2 extends SmartContract {\n  @state(Field) num = State<Field>();\n\n  init() {\n    super.init();\n    this.num.set(Field(1));\n  }\n\n  @method update() {\n    const currentState = this.num.getAndAssertEquals();\n  }\n}\n"}}}}},"highlight":"Add.ts","focusedFiles":{"Add*ts":{"file":{"contents":"import { Field, SmartContract, state, State, method } from \"snarkyjs\";\n\nexport class Add extends SmartContract {\n  @state(Field) num = State<Field>();\n\n  init() {\n    super.init();\n    this.num.set(Field(1));\n  }\n\n  @method update() {\n    const currentState = this.num.getAndAssertEquals();\n  }\n}\n"}},"test2":{"directory":{}}},"testFiles":{"Add*test*ts":{"file":{"contents":"import { Add } from \"../src/Add\";\nimport { Field, Mina, PrivateKey, PublicKey, AccountUpdate } from \"snarkyjs\";\n\n/*\n * This file specifies how to test the `Add` example smart contract. It is safe to delete this file and replace\n * with your own tests.\n *\n * See https://docs.minaprotocol.com/zkapps for more info.\n */\n\nlet proofsEnabled = false;\n\ndescribe(\"Add\", () => {\n  let deployerAccount: PublicKey,\n    deployerKey: PrivateKey,\n    senderAccount: PublicKey,\n    senderKey: PrivateKey,\n    zkAppAddress: PublicKey,\n    zkAppPrivateKey: PrivateKey,\n    zkApp: Add;\n\n  beforeAll(async () => {\n    if (proofsEnabled) await Add.compile();\n  });\n\n  beforeEach(() => {\n    const Local = Mina.LocalBlockchain({ proofsEnabled });\n    Mina.setActiveInstance(Local);\n    ({ privateKey: deployerKey, publicKey: deployerAccount } =\n      Local.testAccounts[0]);\n    ({ privateKey: senderKey, publicKey: senderAccount } =\n      Local.testAccounts[1]);\n    zkAppPrivateKey = PrivateKey.random();\n    zkAppAddress = zkAppPrivateKey.toPublicKey();\n    zkApp = new Add(zkAppAddress);\n  });\n\n  async function localDeploy() {\n    const txn = await Mina.transaction(deployerAccount, () => {\n      AccountUpdate.fundNewAccount(deployerAccount);\n      zkApp.deploy();\n    });\n    await txn.prove();\n    // this tx needs .sign(), because `deploy()` adds an account update that requires signature authorization\n    await txn.sign([deployerKey, zkAppPrivateKey]).send();\n  }\n\n  it(\"generates and deploys the `Add` smart contract\", async () => {\n    await localDeploy();\n    const num = zkApp.num.get();\n    expect(num).toEqual(Field(1));\n  });\n\n  it(\"correctly updates the num state on the `Add` smart contract\", async () => {\n    await localDeploy();\n\n    // update transaction\n    const txn = await Mina.transaction(senderAccount, () => {\n      zkApp.update();\n    });\n    await txn.prove();\n    await txn.sign([senderKey]).send();\n\n    const updatedNum = zkApp.num.get();\n    expect(updatedNum).toEqual(Field(3));\n  });\n});\n"}}}}