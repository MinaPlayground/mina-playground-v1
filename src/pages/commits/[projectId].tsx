import Head from "next/head";
import Header from "@/components/Header";
import { GetServerSideProps, NextPage } from "next";
import axios from "axios";
import { FileSystemTree } from "@webcontainer/api";
import { useAppDispatch } from "@/hooks/useAppDispatch";
import * as Diff from "diff";

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const { projectId } = query;

  try {
    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/versionControl/${projectId}`
    );
    const { data } = response;
    return {
      props: { data },
    };
  } catch {
    return {
      props: { data: null },
    };
  }
};

const Home: NextPage<HomeProps> = ({ data }) => {
  const dispatch = useAppDispatch();

  return (
    <>
      <Head>
        <title>Mina Playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        {data.map(({ files }) => {
          return (
            <>
              <h1>commit</h1>
              {Object.values(files).map(({ previousCode, currentCode }) => {
                const diff = Diff.diffChars(previousCode, currentCode);
                return (
                  <pre className="whitespace-pre-wrap text-gray-200">
                    {diff.map((part) => {
                      const element = part.added ? (
                        <del className="text-green-600 no-underline bg-green-50">
                          {part.value}
                        </del>
                      ) : part.removed ? (
                        <ins className="text-red-600 no-underline bg-red-50">
                          {part.value}
                        </ins>
                      ) : (
                        part.value
                      );
                      return element;
                    })}
                  </pre>
                );
              })}
            </>
          );
        })}
      </main>
    </>
  );
};

interface HomeProps {
  fileSystemTree: FileSystemTree;
  _id: string;
  name: string;
  type: number;
  visibility: boolean;
  files_id: number;
}

export default Home;
