import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { files } from "../../files";
import { useCallback, useEffect, useRef, useState } from "react";
import Editor from "@monaco-editor/react";
import Header from "@/components/Header";
import {
  getWorker,
  MonacoJsxSyntaxHighlight,
} from "monaco-jsx-syntax-highlight";
import { Prism } from "@mantine/prism";
import { Modal } from "flowbite";

const Home = () => {
  const webcontainerInstance = useRef();
  const modal = useRef();

  const [isInitializing, setIsInitializing] = useState(true);
  const [url, setUrl] = useState("");
  const [code, setCode] = useState(
    files.pages.directory["_app.page.tsx"].file.contents
  );

  const setCodeChange = async (code) => {
    setCode(code);
    webcontainerInstance.current.fs.writeFile("/pages/_app.page.tsx", code);
    modal.current.show();
  };

  const installDependencies = async () => {
    const installProcess = await webcontainerInstance.current.spawn("npm", [
      "install",
    ]);
    installProcess.output.pipeTo(
      new WritableStream({
        write(data) {
          console.log(data);
        },
      })
    );
    return installProcess.exit;
  };

  const startDevServer = async () => {
    await webcontainerInstance.current.spawn("npm", ["run", "dev"]);
    webcontainerInstance.current.on("server-ready", (port, url) => {
      setUrl(url);
    });
  };

  useEffect(() => {
    (async () => {
      const $targetEl = document.getElementById("modalEl");
      const options = {
        placement: "center",
        backdrop: "dynamic",
        backdropClasses:
          "bg-gray-900 bg-opacity-50 dark:bg-opacity-80 fixed inset-0 z-40",
        closable: true,
        onHide: () => {
          console.log("modal is hidden");
        },
        onShow: () => {
          console.log("modal is shown");
        },
        onToggle: () => {
          console.log("modal has been toggled");
        },
      };
      modal.current = new Modal($targetEl, options);

      const { WebContainer } = await import("@webcontainer/api");
      webcontainerInstance.current = await WebContainer.boot();
      await webcontainerInstance.current.mount(files);

      const exitCode = await installDependencies();
      if (exitCode !== 0) {
        throw new Error("Installation failed");
      }

      startDevServer();
    })();
  }, []);

  const iframeStyle = isInitializing
    ? {
        backgroundImage: "url('http://localhost:3000/loader.gif')",
        backgroundRepeat: "no-repeat",
        backgroundSize: "fit",
        backgroundPosition: "center center",
      }
    : {};

  const handleEditorDidMount = useCallback((editor: any, monaco: any) => {
    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
      jsx: monaco.languages.typescript.JsxEmit.Preserve,
      target: monaco.languages.typescript.ScriptTarget.ES2020,
      esModuleInterop: true,
    });

    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
      noSemanticValidation: true,
      noSyntaxValidation: true,
    });

    const monacoJsxSyntaxHighlight = new MonacoJsxSyntaxHighlight(
      getWorker(),
      monaco
    );

    const { highlighter, dispose } =
      monacoJsxSyntaxHighlight.highlighterBuilder({
        editor: editor,
      });
    highlighter();

    editor.onDidChangeModelContent(() => {
      highlighter();
    });

    return dispose;
  }, []);

  return (
    <>
      <Head>
        <title>Mina Playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header />
        <div className="flex flex-1">
          <div className="flex-1 bg-[#676778]">
            <div className="p-8">
              <h1 className="mb-4 text-4xl font-extrabold leading-none tracking-tight md:text-5xl lg:text-4xl text-white">
                Introduction
              </h1>
              <h1 className="text-white">
                Our React UI will have a few components. First, there is the
                react page itself. In addition though, there is code that uses
                SnarkyJS. Because SnarkyJS code is computationally intensive,
                running it as usual in a script would block our browser's UI
                thread, causing our page to become unresponsive at times. To
                solve this, we will put our SnarkyJS code in a web worker.
              </h1>
              <h1 className="mb-4 mt-8 text-4xl font-extrabold leading-none tracking-tight md:text-5xl lg:text-4xl text-white">
                Adding a public key
              </h1>
              <h1 className="text-white">
                The first step is to connect the zkApp with the public key of
                the deployed zkapp you want to interact with. In this tutorial
                we will use a public key of a zkApp that has already been
                deployed.
              </h1>
              <h1 className="text-white mt-6 mb-2">
                Copy the following <span className="font-bold">public key</span>
                :
              </h1>
              <Prism className="bg-white rounded" language="tsx">
                B62qnpytBzgKPfjeJ3mxEojzHGJBqUj7qguwNgbcJQZqtiho5KGWfZn
              </Prism>

              <h1 className="text-white mt-6 mb-2">
                And add the <span className="font-bold">public key</span> to the{" "}
                <span className="font-bold">useMina</span> hook :
              </h1>
              <Prism className="bg-white rounded" language="tsx">
                {"const [state, onRefreshCurrentNum, onSendTransaction] = useMina({\n" +
                  '    publicKey: "B62qnpytBzgKPfjeJ3mxEojzHGJBqUj7qguwNgbcJQZqtiho5KGWfZn",\n' +
                  '    values: ["num"],\n' +
                  "  });"}
              </Prism>
              <div className="flex justify-between">
                <button
                  type="button"
                  className="mt-6 text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
                >
                  Show me
                </button>
                <button
                  type="button"
                  className="inline-flex mt-6 text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
                >
                  Next
                  <svg
                    aria-hidden="true"
                    className="w-5 h-5 ml-2 -mr-1"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div className="flex flex-1">
            <div className="flex flex-1 flex-col">
              <div className="flex-1 border-b-2">
                <Editor
                  className="editor"
                  // theme={"vs-dark"}
                  path={"file:///index.tsx"}
                  defaultLanguage="typescript"
                  defaultValue={code}
                  onChange={setCodeChange}
                  onMount={handleEditorDidMount}
                  options={{
                    fontSize: 16,
                    lineHeight: 28,
                    automaticLayout: true,
                  }}
                />
              </div>
              <div className="flex-1">
                <iframe
                  src={url}
                  onLoad={() => setIsInitializing(false)}
                  className="h-full w-full"
                  style={iframeStyle}
                  allow="cross-origin-isolated"
                />
              </div>
            </div>
          </div>

          <div
            id="modalEl"
            tabIndex="-1"
            aria-hidden="true"
            className="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] md:h-full"
          >
            <div className="relative w-full h-full max-w-md md:h-auto">
              <div className="relative bg-white rounded-lg shadow dark:bg-gray-700">
                <div className="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-600">
                  <div className="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-green-500 bg-green-100 rounded-lg dark:bg-green-800 dark:text-green-200">
                    <svg
                      aria-hidden="true"
                      className="w-5 h-5"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                        clip-rule="evenodd"
                      ></path>
                    </svg>
                    <span className="sr-only">Check icon</span>
                  </div>
                  <h3 className="ml-2 text-xl font-semibold text-green-600 lg:text-2xl dark:text-white">
                    Completed!
                  </h3>
                  <button
                    type="button"
                    className="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
                  >
                    <svg
                      className="w-5 h-5"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        clip-rule="evenodd"
                      ></path>
                    </svg>
                  </button>
                </div>
                <div className="p-6 space-y-6">
                  <p className="text-base leading-relaxed text-gray-500 dark:text-gray-400">
                    You have completed the tutorial. Please wait for the zkApp
                    to compile and see the result!
                  </p>
                </div>
                <div className="flex items-center p-6 space-x-2 border-t border-gray-200 rounded-b dark:border-gray-600">
                  <button
                    type="button"
                    onClick={() => modal.current.hide()}
                    className="text-white bg-gradient-to-r from-green-500 via-green-600 to-green-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-green-300 dark:focus:ring-green-800 shadow-lg shadow-green-500/50 dark:shadow-lg dark:shadow-green-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
                  >
                    Understood
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
