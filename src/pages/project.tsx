import Head from "next/head";
import Header from "@/components/Header";
import { NextPage } from "next";
import { useState } from "react";
import { useRouter } from "next/router";
import { useCreateProjectMutation } from "@/services/project";
import Button from "@/components/button/Button";

const Project: NextPage = () => {
  const [name, setName] = useState("");
  const [repositoryUrl, setRepositoryUrl] = useState("");
  const router = useRouter();
  const [createProject] = useCreateProjectMutation();
  const [isLoading, setIsLoading] = useState(false);
  const [cloneRepositoryLoading, setCloneRepositoryLoading] = useState(false);

  const onSubmit = async () => {
    setIsLoading(true);
    const body = { name, type: 0, visibility: true, files_id: 1 };
    try {
      const response = await createProject({ body }).unwrap();
      router.push(`/project/${response.project_id}`);
    } catch {
      setIsLoading(false);
    }
  };

  const onCloneRepository = async () => {
    const repositoryParts = repositoryUrl.split("github.com/");
    const usernameRepository = repositoryParts[repositoryParts.length - 1];
    setCloneRepositoryLoading(true);
    await router.push(`/github/${usernameRepository}`);
    setCloneRepositoryLoading(false);
  };

  return (
    <>
      <Head>
        <title>Mina Playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <section>
          <div className="flex justify-center m-4 sm:m-4">
            <div className="w-full lg:max-w-xl p-6 space-y-4 sm:p-8 bg-primary rounded-lg shadow-2xl">
              <h2 className="text-2xl font-bold text-gray-200">
                Create a new project
              </h2>
              <div className="mt-8 space-y-6">
                <div>
                  <label
                    htmlFor="name"
                    className="block mb-2 text-sm font-medium text-gray-200"
                  >
                    Project name
                  </label>
                  <input
                    type="text"
                    placeholder="My project"
                    value={name}
                    onChange={(evt) => setName(evt.target.value)}
                    className="input input-bordered w-full text-gray-200"
                    required
                  />
                </div>
                <Button isLoading={isLoading} onClick={onSubmit}>
                  Create project
                </Button>
              </div>
              <div className="divider text-gray-200">OR</div>
              <h2 className="text-2xl font-bold text-gray-200">
                Clone a repository
              </h2>
              <div className="mt-8 space-y-6">
                <div>
                  <label
                    htmlFor="name"
                    className="block mb-2 text-sm font-medium text-gray-200"
                  >
                    GitHub repository URL
                  </label>
                  <input
                    type="text"
                    placeholder="https://github.com/username/repository"
                    value={repositoryUrl}
                    onChange={(evt) => setRepositoryUrl(evt.target.value)}
                    className="input input-bordered w-full text-gray-200"
                    required
                  />
                </div>
                <Button
                  isLoading={cloneRepositoryLoading}
                  onClick={onCloneRepository}
                >
                  Clone repository
                </Button>
              </div>
            </div>
          </div>
        </section>
      </main>
    </>
  );
};

export default Project;
