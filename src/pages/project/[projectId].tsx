import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Header from "@/components/Header";
import { GetServerSideProps, NextPage } from "next";
import axios from "axios";
import { FileSystemTree } from "@webcontainer/api";
import Tree from "@/components/file-explorer/Tree";
import { useState } from "react";
import CodeEditor from "@/components/editor/CodeEditor";

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const { projectId } = query;
  try {
    const responseProject = await axios.get(
      `http://localhost:3000/project/${projectId}`
    );
    const response = await axios.get(
      `http://localhost:3000/fileTree/${projectId}`
    );
    const { data } = response;
    return {
      props: { ...responseProject.data, ...data },
    };
  } catch {
    return {
      props: { data: null },
    };
  }
};

const Home: NextPage<HomeProps> = ({ fileSystemTree, name, _id }) => {
  const [directory, setDirectory] = useState({
    path: "",
    webcontainerPath: "",
  });
  const [code, setCode] = useState<string | undefined>("test");

  const setCodeChange = async (code: string | undefined, dir?: string) => {
    if (!code) return;
    setCode(code);
  };

  const onClick = async (code: string, dir: string) => {
    setCodeChange(code, dir);
  };

  const save = async () => {
    try {
      const response = await axios.patch(
        `http://localhost:3000/fileTree/${_id}`,
        { fileLocation: directory.webcontainerPath, code },
        { headers: { "Content-Type": "application/json" } }
      );
    } catch {}
  };

  return (
    <>
      <Head>
        <title>Mina Playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header />
        <div className="flex flex-1 grid lg:grid-cols-2">
          <div className="p-2">
            <h1 className="text-2xl font-medium">Project: {name}</h1>
            <button type="button" onClick={save}>
              Save
            </button>
            <Tree
              data={fileSystemTree}
              onBlur={() => null}
              onClick={onClick}
              setCurrentDirectory={setDirectory}
              currentDirectory={directory}
            />
          </div>
          <CodeEditor code={code} setCodeChange={setCodeChange} />
        </div>
      </main>
    </>
  );
};

interface HomeProps {
  fileSystemTree: FileSystemTree;
  _id: string;
  name: string;
  type: number;
  visibility: boolean;
  files_id: number;
}

export default Home;
