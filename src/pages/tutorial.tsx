import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Header from "@/components/Header";
import Editor from "@monaco-editor/react";
import { useCallback, useEffect, useRef, useState } from "react";
import {
  getWorker,
  MonacoJsxSyntaxHighlight,
} from "monaco-jsx-syntax-highlight";
import { Prism } from "@mantine/prism";
import { files } from "../../files";
import Loader from "@/components/Loader";
import { WebContainer } from "@webcontainer/api";

const codeBlock = `class HelloWorld extends SmartContract {}
`;

const codeBlock2 = `class HelloWorld extends SmartContract {
  @method myMethod(x: Field) {
    x.mul(2).assertEquals(5);
  }
}`;

const Home = () => {
  const [isInitializing, setIsInitializing] = useState(true);
  const [code, setCode] = useState(files.src.directory["Add.ts"].file.contents);
  const webcontainerInstance = useRef<WebContainer | null>(null);

  const setCodeChange = (code: string | undefined) => {
    if (!code) return;
    setCode(code);
    webcontainerInstance.current?.fs.writeFile("/src/Add.ts", code);
  };

  const installDependencies = async () => {
    if (!webcontainerInstance.current) return;
    const installProcess = await webcontainerInstance.current.spawn("npm", [
      "install",
    ]);
    installProcess.output.pipeTo(
      new WritableStream({
        write(data) {
          console.log(data);
        },
      })
    );
    return installProcess.exit;
  };

  const runTests = async () => {
    if (!webcontainerInstance.current) return;
    const terminalEl = document.querySelector(".terminal") as HTMLDivElement;
    const { Terminal } = await import("xterm");
    const terminal = new Terminal({
      convertEol: true,
    });
    terminal.open(terminalEl);
    const installProcess = await webcontainerInstance.current.spawn("npm", [
      "run",
      "testw",
    ]);
    setIsInitializing(false);
    installProcess.output.pipeTo(
      new WritableStream({
        write(data) {
          terminal.write(data);
        },
      })
    );
    return installProcess.exit;
  };

  useEffect(() => {
    (async () => {
      setIsInitializing(true);
      const { WebContainer } = await import("@webcontainer/api");
      webcontainerInstance.current = await WebContainer.boot();
      await webcontainerInstance.current.mount(files);

      const exitCode = await installDependencies();
      if (exitCode !== 0) {
        throw new Error("Installation failed");
      }

      const jest = await runTests();
      if (jest !== 0) {
        throw new Error("Jest fail");
      }
    })();
  }, []);

  const handleEditorDidMount = useCallback((editor: any, monaco: any) => {
    monaco.languages.typescript.typescriptDefaults.setCompilerOptions({
      jsx: monaco.languages.typescript.JsxEmit.Preserve,
      target: monaco.languages.typescript.ScriptTarget.ES2020,
      esModuleInterop: true,
    });

    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
      noSemanticValidation: true,
      noSyntaxValidation: true,
    });

    const monacoJsxSyntaxHighlight = new MonacoJsxSyntaxHighlight(
      getWorker(),
      monaco
    );

    const { highlighter, dispose } =
      monacoJsxSyntaxHighlight.highlighterBuilder({
        editor: editor,
      });

    highlighter();

    editor.onDidChangeModelContent(() => {
      highlighter();
    });

    return dispose;
  }, []);

  return (
    <>
      <Head>
        <title>Mina Playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header />
        <div className="grid md:grid-cols-2">
          <div className="bg-[#eee]">
            <div className="p-4">
              <h1 className="mb-4 px-2 rounded-md py-1 text-4xl font-bold leading-none tracking-tight md:text-5xl lg:text-2xl text-white bg-gradient-to-br from-pink-500 to-orange-400">
                Smart Contracts
              </h1>
              <h1 className="text-black mb-2">
                Smart contracts are written by extending the base class{" "}
                <span className="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-red-900 dark:text-red-300">
                  SmartContract
                </span>
                :
              </h1>
              <Prism className="bg-white rounded mb-2" language="typescript">
                {codeBlock}
              </Prism>

              <h1 className="text-black mb-2">
                Interaction with a smart contract happens by calling one or more
                of its methods. You declare methods using the{" "}
                <span className="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-red-900 dark:text-red-300">
                  @method
                </span>
                decorator:
              </h1>
              <Prism className="bg-white rounded" language="typescript">
                {codeBlock2}
              </Prism>
              <h1 className="mb-4 px-2 rounded-md py-1 mt-8 text-4xl font-bold leading-none tracking-tight md:text-5xl lg:text-2xl text-white bg-gradient-to-br from-pink-500 to-orange-400">
                Update the state
              </h1>
              <h1 className="text-black">
                Our goal is when the 'update' method is called, the Add contract
                adds Field(2) to its 'num' contract state.
              </h1>
              <h1 className="text-black mt-4 mb-2">
                We can update our current state using the{" "}
                <span className="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-red-900 dark:text-red-300">
                  add
                </span>
                method :
              </h1>
              <Prism className="bg-white rounded mb-2" language="tsx">
                {`const newState = currentState.add(2);`}
              </Prism>

              <h1 className="text-black mb-2">
                And update the state of <span className="font-bold">num</span>{" "}
                with our new state:
              </h1>
              <Prism className="bg-white rounded" language="tsx">
                {`this.num.set(newState);`}
              </Prism>
              <div className="flex justify-between">
                <button
                  type="button"
                  className="mt-6 text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
                >
                  Show me
                </button>
                <button
                  type="button"
                  className="inline-flex mt-6 text-white bg-gradient-to-br from-pink-500 to-orange-400 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2"
                >
                  Next
                  <svg
                    aria-hidden="true"
                    className="w-5 h-5 ml-2 -mr-1"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div className="flex flex-col">
            <div className="flex-1 border-b-2">
              <Editor
                className="editor"
                path={"file:///index.tsx"}
                defaultLanguage="typescript"
                defaultValue={code}
                onChange={setCodeChange}
                onMount={handleEditorDidMount}
                options={{
                  fontSize: 16,
                  lineHeight: 28,
                  automaticLayout: true,
                }}
              />
            </div>
            <div className="flex-1 bg-gray-100 p-2">
              <div className="terminal" />
              {isInitializing && <Loader text="Initializing Smart contract" />}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
